{
    "openapi": "3.0.3",
    "info": {
        "title": "Steamworks Web API",
        "version": "1.0.0",
        "description": "This is an OpenAPI specification for the Steamworks Web API. For more details on how to use this tool, check out the <a href=\"https://github.com/ceva24/openapi-steamworks-web-api/blob/main/README.md\">README</a>.",
        "termsOfService": "https://steamcommunity.com/dev/apiterms",
        "contact": {
            "name": "Steam Support",
            "url": "https://help.steampowered.com/"
        }
    },
    "servers": [
        {
            "url": "https://api.steampowered.com"
        },
        {
            "url": "https://partner.steam-api.com"
        }
    ],
    "paths": {
        "/IAuthenticationService/BeginAuthSessionViaCredentials/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#BeginAuthSessionViaCredentials"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "device_friendly_name": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "account_name": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "encrypted_password": {
                                        "type": "string",
                                        "description": "(Required) password, RSA encrypted client side"
                                    },
                                    "encryption_timestamp": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) timestamp to map to a key - STime"
                                    },
                                    "remember_login": {
                                        "type": "boolean",
                                        "description": "(Required) deprecated"
                                    },
                                    "platform_type": {
                                        "type": "string",
                                        "format": "{enum}",
                                        "description": "(Required)"
                                    },
                                    "persistence": {
                                        "type": "string",
                                        "format": "{enum}",
                                        "description": "whether we are requesting a persistent or an ephemeral session"
                                    },
                                    "website_id": {
                                        "type": "string",
                                        "description": "(EMachineAuthWebDomain) identifier of client requesting auth"
                                    },
                                    "device_details": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Required) User-supplied details about the device attempting to sign in"
                                    },
                                    "guard_data": {
                                        "type": "string",
                                        "description": "(Required) steam guard data for client login"
                                    },
                                    "language": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required)"
                                    },
                                    "qos_level": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "[ENetQOSLevel] client-specified priority for this auth attempt"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IAuthenticationService/BeginAuthSessionViaQR/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#BeginAuthSessionViaQR"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "device_friendly_name": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "platform_type": {
                                        "type": "string",
                                        "format": "{enum}",
                                        "description": "(Required)"
                                    },
                                    "device_details": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Required) User-supplied details about the device attempting to sign in"
                                    },
                                    "website_id": {
                                        "type": "string",
                                        "description": "(EMachineAuthWebDomain) identifier of client requesting auth"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IAuthenticationService/GetAuthSessionInfo/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#GetAuthSessionInfo"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "client_id": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) client ID from scanned QR Code, used for routing"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IAuthenticationService/GetAuthSessionRiskInfo/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#GetAuthSessionRiskInfo"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "client_id": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) client ID from scanned QR Code, used for routing"
                                    },
                                    "language": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) language for optimistic localization of geoloc data"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IAuthenticationService/GetPasswordRSAPublicKey/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "account_name",
                        "in": "query",
                        "description": "(Required) user-provided account name to get an RSA key for",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#GetPasswordRSAPublicKey"
                },
                "tags": [
                    "IAuthenticationService"
                ]
            }
        },
        "/IAuthenticationService/NotifyRiskQuizResults/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#NotifyRiskQuizResults"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "client_id": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) client ID for the auth session, used for routing"
                                    },
                                    "results": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Required) Whether or not the user correctly answered each risk quiz question"
                                    },
                                    "selected_action": {
                                        "type": "string",
                                        "description": "(Required) The action being taken selected by the user during the quiz"
                                    },
                                    "did_confirm_login": {
                                        "type": "boolean",
                                        "description": "(Required) Whether or not the user went on to confirm the login or not in the case of a passed quiz"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IAuthenticationService/PollAuthSessionStatus/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#PollAuthSessionStatus"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "client_id": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    },
                                    "request_id": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "token_to_revoke": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) If this is set to a token owned by this user, that token will be retired"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IAuthenticationService/UpdateAuthSessionWithMobileConfirmation/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#UpdateAuthSessionWithMobileConfirmation"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "version": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) version field"
                                    },
                                    "client_id": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) pending client ID, from scanned QR Code"
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) user who wants to login"
                                    },
                                    "signature": {
                                        "type": "string",
                                        "description": "(Required) HMAC digest over {version,client_id,steamid} via user's private key"
                                    },
                                    "confirm": {
                                        "type": "boolean",
                                        "description": "Whether to confirm the login (true) or deny the login (false)"
                                    },
                                    "persistence": {
                                        "type": "string",
                                        "format": "{enum}",
                                        "description": "whether we are requesting a persistent or an ephemeral session"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IAuthenticationService/UpdateAuthSessionWithSteamGuardCode/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IAuthenticationService#UpdateAuthSessionWithSteamGuardCode"
                },
                "tags": [
                    "IAuthenticationService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "client_id": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) pending client ID, from initialized session"
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) user who wants to login"
                                    },
                                    "code": {
                                        "type": "string",
                                        "description": "(Required) confirmation code"
                                    },
                                    "code_type": {
                                        "type": "string",
                                        "format": "{enum}",
                                        "description": "(Required) type of confirmation code"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IBroadcastService/PostGameDataFrameRTMP/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IBroadcastService#PostGameDataFrameRTMP"
                },
                "tags": [
                    "IBroadcastService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) AppID of the game being broadcasted"
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) Broadcasters SteamID"
                                    },
                                    "rtmp_token": {
                                        "type": "string",
                                        "description": "(Required) Valid RTMP token for the Broadcaster"
                                    },
                                    "frame_data": {
                                        "type": "string",
                                        "description": "(Required) game data frame expressing current state of game (string, zipped, whatever)"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ICSGOPlayers_730/GetNextMatchSharingCode/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The SteamID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "steamidkey",
                        "in": "query",
                        "description": "Authentication obtained from the SteamID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "knowncode",
                        "in": "query",
                        "description": "Previously known match sharing code obtained from the SteamID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOPlayers_730#GetNextMatchSharingCode"
                },
                "tags": [
                    "ICSGOPlayers"
                ]
            }
        },
        "/ICSGOServers_730/GetGameMapsPlaytime/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "What recent interval is requested, possible values: day, week, month",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gamemode",
                        "in": "query",
                        "description": "What game mode is requested, possible values: competitive, casual",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mapgroup",
                        "in": "query",
                        "description": "What maps are requested, possible values: operation",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOServers_730#GetGameMapsPlaytime"
                },
                "tags": [
                    "ICSGOServers"
                ]
            }
        },
        "/ICSGOServers_730/GetGameServersStatus/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOServers_730#GetGameServersStatus"
                },
                "tags": [
                    "ICSGOServers"
                ]
            }
        },
        "/ICSGOTournaments_730/GetTournamentFantasyLineup/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "event",
                        "in": "query",
                        "description": "The event ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The SteamID of the user inventory",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "steamidkey",
                        "in": "query",
                        "description": "Authentication obtained from the SteamID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOTournaments_730#GetTournamentFantasyLineup"
                },
                "tags": [
                    "ICSGOTournaments"
                ]
            }
        },
        "/ICSGOTournaments_730/GetTournamentItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "event",
                        "in": "query",
                        "description": "The event ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The SteamID of the user inventory",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "steamidkey",
                        "in": "query",
                        "description": "Authentication obtained from the SteamID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOTournaments_730#GetTournamentItems"
                },
                "tags": [
                    "ICSGOTournaments"
                ]
            }
        },
        "/ICSGOTournaments_730/GetTournamentLayout/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "event",
                        "in": "query",
                        "description": "The event ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOTournaments_730#GetTournamentLayout"
                },
                "tags": [
                    "ICSGOTournaments"
                ]
            }
        },
        "/ICSGOTournaments_730/GetTournamentPredictions/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "event",
                        "in": "query",
                        "description": "The event ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The SteamID of the user inventory",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "steamidkey",
                        "in": "query",
                        "description": "Authentication obtained from the SteamID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOTournaments_730#GetTournamentPredictions"
                },
                "tags": [
                    "ICSGOTournaments"
                ]
            }
        },
        "/ICSGOTournaments_730/UploadTournamentFantasyLineup/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOTournaments_730#UploadTournamentFantasyLineup"
                },
                "tags": [
                    "ICSGOTournaments"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "event": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The event ID"
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "The SteamID of the user inventory"
                                    },
                                    "steamidkey": {
                                        "type": "string",
                                        "description": "Authentication obtained from the SteamID"
                                    },
                                    "sectionid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Event section id"
                                    },
                                    "pickid0": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "PickID to select for the slot"
                                    },
                                    "itemid0": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "ItemID to lock in for the pick"
                                    },
                                    "pickid1": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "PickID to select for the slot"
                                    },
                                    "itemid1": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "ItemID to lock in for the pick"
                                    },
                                    "pickid2": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "PickID to select for the slot"
                                    },
                                    "itemid2": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "ItemID to lock in for the pick"
                                    },
                                    "pickid3": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "PickID to select for the slot"
                                    },
                                    "itemid3": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "ItemID to lock in for the pick"
                                    },
                                    "pickid4": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "PickID to select for the slot"
                                    },
                                    "itemid4": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "ItemID to lock in for the pick"
                                    }
                                },
                                "required": [
                                    "event",
                                    "steamid",
                                    "steamidkey",
                                    "sectionid",
                                    "pickid0",
                                    "itemid0",
                                    "pickid1",
                                    "itemid1",
                                    "pickid2",
                                    "itemid2",
                                    "pickid3",
                                    "itemid3",
                                    "pickid4",
                                    "itemid4"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ICSGOTournaments_730/UploadTournamentPredictions/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICSGOTournaments_730#UploadTournamentPredictions"
                },
                "tags": [
                    "ICSGOTournaments"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "event": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The event ID"
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "The SteamID of the user inventory"
                                    },
                                    "steamidkey": {
                                        "type": "string",
                                        "description": "Authentication obtained from the SteamID"
                                    },
                                    "sectionid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Event section id"
                                    },
                                    "groupid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Event group id"
                                    },
                                    "index": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Index in group"
                                    },
                                    "pickid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Pick ID to select"
                                    },
                                    "itemid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "ItemID to lock in for the pick"
                                    }
                                },
                                "required": [
                                    "event",
                                    "steamid",
                                    "steamidkey",
                                    "sectionid",
                                    "groupid",
                                    "index",
                                    "pickid",
                                    "itemid"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ICheatReportingService/ReportCheatData/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ICheatReportingService#ReportCheatData"
                },
                "tags": [
                    "ICheatReportingService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) steamid of the user running and reporting the cheat."
                                    },
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) The appid."
                                    },
                                    "pathandfilename": {
                                        "type": "string",
                                        "description": "(Required) path and file name of the cheat executable."
                                    },
                                    "webcheaturl": {
                                        "type": "string",
                                        "description": "(Required) web url where the cheat was found and downloaded."
                                    },
                                    "time_now": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) local system time now."
                                    },
                                    "time_started": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) local system time when cheat process started. ( 0 if not yet run )"
                                    },
                                    "time_stopped": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) local system time when cheat process stopped. ( 0 if still running )"
                                    },
                                    "cheatname": {
                                        "type": "string",
                                        "description": "(Required) descriptive name for the cheat."
                                    },
                                    "game_process_id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) process ID of the running game."
                                    },
                                    "cheat_process_id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) process ID of the cheat process that ran"
                                    },
                                    "cheat_param_1": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) cheat param 1"
                                    },
                                    "cheat_param_2": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) cheat param 2"
                                    },
                                    "cheat_data_dump": {
                                        "type": "string",
                                        "description": "(Required) data collection in json format"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IClientStats_1046930/ReportEvent/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IClientStats_1046930#ReportEvent"
                },
                "tags": [
                    "IClientStats"
                ]
            }
        },
        "/IContentServerConfigService/GetSteamCacheNodeParams/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "cache_id",
                        "in": "query",
                        "description": "(Required) Unique ID number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "cache_key",
                        "in": "query",
                        "description": "(Required) Valid current cache API key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerConfigService#GetSteamCacheNodeParams"
                },
                "tags": [
                    "IContentServerConfigService"
                ]
            }
        },
        "/IContentServerConfigService/SetSteamCacheClientFilters/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerConfigService#SetSteamCacheClientFilters"
                },
                "tags": [
                    "IContentServerConfigService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "cache_id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) Unique ID number"
                                    },
                                    "cache_key": {
                                        "type": "string",
                                        "description": "(Required) Valid current cache API key"
                                    },
                                    "change_notes": {
                                        "type": "string",
                                        "description": "(Required) Notes"
                                    },
                                    "allowed_ip_blocks": {
                                        "type": "string",
                                        "description": "(Required) comma-separated list of allowed IP address blocks in CIDR format - blank to clear unfilter"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IContentServerConfigService/SetSteamCachePerformanceStats/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerConfigService#SetSteamCachePerformanceStats"
                },
                "tags": [
                    "IContentServerConfigService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "cache_id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) Unique ID number"
                                    },
                                    "cache_key": {
                                        "type": "string",
                                        "description": "(Required) Valid current cache API key"
                                    },
                                    "mbps_sent": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) Outgoing network traffic in Mbps"
                                    },
                                    "mbps_recv": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) Incoming network traffic in Mbps"
                                    },
                                    "cpu_percent": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) Percent CPU load"
                                    },
                                    "cache_hit_percent": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) Percent cache hits"
                                    },
                                    "num_connected_ips": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) Number of unique connected IP addresses"
                                    },
                                    "upstream_egress_utilization": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) (deprecated) What is the percent utilization of the busiest datacenter egress link?"
                                    },
                                    "upstream_peering_utilization": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) What is the percent utilization of the busiest peering link?"
                                    },
                                    "upstream_transit_utilization": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) What is the percent utilization of the busiest transit link?"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IContentServerDirectoryService/GetCDNForVideo/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "property_type",
                        "in": "query",
                        "description": "(Required) ECDNPropertyType",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "client_ip",
                        "in": "query",
                        "description": "(Required) client IP address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "client_region",
                        "in": "query",
                        "description": "(Required) client region",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerDirectoryService#GetCDNForVideo"
                },
                "tags": [
                    "IContentServerDirectoryService"
                ]
            }
        },
        "/IContentServerDirectoryService/GetClientUpdateHosts/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "cached_signature",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerDirectoryService#GetClientUpdateHosts"
                },
                "tags": [
                    "IContentServerDirectoryService"
                ]
            }
        },
        "/IContentServerDirectoryService/GetDepotPatchInfo/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "depotid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "source_manifestid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "target_manifestid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerDirectoryService#GetDepotPatchInfo"
                },
                "tags": [
                    "IContentServerDirectoryService"
                ]
            }
        },
        "/IContentServerDirectoryService/GetServersForSteamPipe/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "cell_id",
                        "in": "query",
                        "description": "(Required) client Cell ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_servers",
                        "in": "query",
                        "description": "max servers in response list",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ip_override",
                        "in": "query",
                        "description": "client IP address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "launcher_type",
                        "in": "query",
                        "description": "launcher type",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ipv6_public",
                        "in": "query",
                        "description": "client public ipv6 address if it knows it",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "current_connections",
                        "in": "query",
                        "description": "(Required) what sources is the client currently using",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerDirectoryService#GetServersForSteamPipe"
                },
                "tags": [
                    "IContentServerDirectoryService"
                ]
            }
        },
        "/IContentServerDirectoryService/PickSingleContentServer/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "property_type",
                        "in": "query",
                        "description": "(Required) ECDNPropertyType",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "cell_id",
                        "in": "query",
                        "description": "(Required) client Cell ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "client_ip",
                        "in": "query",
                        "description": "(Required) client IP address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IContentServerDirectoryService#PickSingleContentServer"
                },
                "tags": [
                    "IContentServerDirectoryService"
                ]
            }
        },
        "/IDOTA2MatchStats_570/GetRealtimeStats/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "server_steam_id",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2MatchStats_570#GetRealtimeStats"
                },
                "tags": [
                    "IDOTA2MatchStats"
                ]
            }
        },
        "/IDOTA2Match_570/GetLiveLeagueGames/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "league_id",
                        "in": "query",
                        "description": "Only show matches of the specified league id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "match_id",
                        "in": "query",
                        "description": "Only show matches of the specified match id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "dpc",
                        "in": "query",
                        "description": "Only show matches that are part of the DPC",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetLiveLeagueGames"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetMatchDetails/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "match_id",
                        "in": "query",
                        "description": "Match id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "include_persona_names",
                        "in": "query",
                        "description": "Include persona names as part of the response",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetMatchDetails"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetMatchHistory/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "hero_id",
                        "in": "query",
                        "description": "The ID of the hero that must be in the matches being queried",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "game_mode",
                        "in": "query",
                        "description": "Which game mode to return matches for",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "skill",
                        "in": "query",
                        "description": "The average skill range of the match, these can be [1-3] with lower numbers being lower skill. Ignored if an account ID is specified",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "min_players",
                        "in": "query",
                        "description": "Minimum number of human players that must be in a match for it to be returned",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "query",
                        "description": "An account ID to get matches from. This will fail if the user has their match history hidden",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "league_id",
                        "in": "query",
                        "description": "The league ID to return games from",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start_at_match_id",
                        "in": "query",
                        "description": "The minimum match ID to start from",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "matches_requested",
                        "in": "query",
                        "description": "The number of requested matches to return (maximum 100)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetMatchHistory"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetMatchHistoryBySequenceNum/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "start_at_match_seq_num",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "matches_requested",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetMatchHistoryBySequenceNum"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetTeamInfoByTeamID/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "start_at_team_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "teams_requested",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetTeamInfoByTeamID"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetTopLiveEventGame/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "partner",
                        "in": "query",
                        "description": "Which partner's games to use.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetTopLiveEventGame"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetTopLiveGame/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "partner",
                        "in": "query",
                        "description": "Which partner's games to use.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetTopLiveGame"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetTopWeekendTourneyGames/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "partner",
                        "in": "query",
                        "description": "Which partner's games to use.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "home_division",
                        "in": "query",
                        "description": "Prefer matches from this division.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetTopWeekendTourneyGames"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetTournamentPlayerStats/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "league_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hero_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time_frame",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "match_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetTournamentPlayerStats"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2Match_570/GetTournamentPlayerStats/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "league_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hero_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time_frame",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "match_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "phase_id",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Match_570#GetTournamentPlayerStats"
                },
                "tags": [
                    "IDOTA2Match"
                ]
            }
        },
        "/IDOTA2StreamSystem_570/GetBroadcasterInfo/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "broadcaster_steam_id",
                        "in": "query",
                        "description": "64-bit Steam ID of the broadcaster",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "league_id",
                        "in": "query",
                        "description": "LeagueID to use if we aren't in a lobby",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2StreamSystem_570#GetBroadcasterInfo"
                },
                "tags": [
                    "IDOTA2StreamSystem"
                ]
            }
        },
        "/IDOTA2Ticket_570/GetSteamIDForBadgeID/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "BadgeID",
                        "in": "query",
                        "description": "The badge ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Ticket_570#GetSteamIDForBadgeID"
                },
                "tags": [
                    "IDOTA2Ticket"
                ]
            }
        },
        "/IDOTA2Ticket_570/SetSteamAccountPurchased/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Ticket_570#SetSteamAccountPurchased"
                },
                "tags": [
                    "IDOTA2Ticket"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "The 64-bit Steam ID"
                                    },
                                    "BadgeType": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Badge Type"
                                    }
                                },
                                "required": [
                                    "steamid",
                                    "BadgeType"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/IDOTA2Ticket_570/SteamAccountValidForBadgeType/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The 64-bit Steam ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ValidBadgeType1",
                        "in": "query",
                        "description": "Valid Badge Type 1",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ValidBadgeType2",
                        "in": "query",
                        "description": "Valid Badge Type 2",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ValidBadgeType3",
                        "in": "query",
                        "description": "Valid Badge Type 3",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ValidBadgeType4",
                        "in": "query",
                        "description": "Valid Badge Type 4",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IDOTA2Ticket_570#SteamAccountValidForBadgeType"
                },
                "tags": [
                    "IDOTA2Ticket"
                ]
            }
        },
        "/IEconDOTA2_570/GetEventStatsForAccount/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "eventid",
                        "in": "query",
                        "description": "The Event ID of the event you're looking for.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "accountid",
                        "in": "query",
                        "description": "The account ID to look up.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to provide hero names in.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconDOTA2_570#GetEventStatsForAccount"
                },
                "tags": [
                    "IEconDOTA2"
                ]
            }
        },
        "/IEconDOTA2_570/GetHeroes/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to provide hero names in.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "itemizedonly",
                        "in": "query",
                        "description": "Return a list of itemized heroes only.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconDOTA2_570#GetHeroes"
                },
                "tags": [
                    "IEconDOTA2"
                ]
            }
        },
        "/IEconDOTA2_570/GetItemCreators/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "itemdef",
                        "in": "query",
                        "description": "The item definition to get creator information for.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconDOTA2_570#GetItemCreators"
                },
                "tags": [
                    "IEconDOTA2"
                ]
            }
        },
        "/IEconDOTA2_570/GetItemWorkshopPublishedFileIDs/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "itemdef",
                        "in": "query",
                        "description": "The item definition to get published file ids for.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconDOTA2_570#GetItemWorkshopPublishedFileIDs"
                },
                "tags": [
                    "IEconDOTA2"
                ]
            }
        },
        "/IEconDOTA2_570/GetRarities/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to provide rarity names in.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconDOTA2_570#GetRarities"
                },
                "tags": [
                    "IEconDOTA2"
                ]
            }
        },
        "/IEconDOTA2_570/GetTournamentPrizePool/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "leagueid",
                        "in": "query",
                        "description": "The ID of the league to get the prize pool of",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconDOTA2_570#GetTournamentPrizePool"
                },
                "tags": [
                    "IEconDOTA2"
                ]
            }
        },
        "/IEconItems_1046930/GetPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_1046930#GetPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_1269260/GetEquippedPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "class_id",
                        "in": "query",
                        "description": "Return items equipped for this class id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_1269260#GetEquippedPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_238460/GetPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_238460#GetPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_440/GetPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_440#GetPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_440/GetSchema/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to return the names in. Defaults to returning string keys.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_440#GetSchema"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_440/GetSchemaItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to return the names in. Defaults to returning string keys.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "The first item id to return. Defaults to 0. Response will indicate next value to query if applicable.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_440#GetSchemaItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_440/GetSchemaOverview/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to return the names in. Defaults to returning string keys.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_440#GetSchemaOverview"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_440/GetSchemaURL/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_440#GetSchemaURL"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_440/GetStoreMetaData/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to results in.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_440#GetStoreMetaData"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_440/GetStoreStatus/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_440#GetStoreStatus"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_570/GetPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_570#GetPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_570/GetStoreMetaData/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to results in.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_570#GetStoreMetaData"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_583950/GetEquippedPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "class_id",
                        "in": "query",
                        "description": "Return items equipped for this class id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_583950#GetEquippedPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_620/GetPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_620#GetPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_620/GetSchema/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to return the names in. Defaults to returning string keys.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_620#GetSchema"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_730/GetPlayerItems/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_730#GetPlayerItems"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_730/GetSchema/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to return the names in. Defaults to returning string keys.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_730#GetSchema"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_730/GetSchemaURL/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_730#GetSchemaURL"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconItems_730/GetStoreMetaData/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language to results in.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconItems_730#GetStoreMetaData"
                },
                "tags": [
                    "IEconItems"
                ]
            }
        },
        "/IEconService/GetTradeHistory/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "max_trades",
                        "in": "query",
                        "description": "(Required) The number of trades to return information for",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start_after_time",
                        "in": "query",
                        "description": "(Required) The time of the last trade shown on the previous page of results, or the time of the first trade if navigating back",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start_after_tradeid",
                        "in": "query",
                        "description": "(Required) The tradeid shown on the previous page of results, or the ID of the first trade if navigating back",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "navigating_back",
                        "in": "query",
                        "description": "(Required) The user wants the previous page of results, so return the previous max_trades trades before the start time and ID",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "get_descriptions",
                        "in": "query",
                        "description": "(Required) If set, the item display data for the items included in the returned trades will also be returned",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "(Required) The language to use when loading item display data",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include_failed",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "include_total",
                        "in": "query",
                        "description": "(Required) If set, the total number of trades the account has participated in will be included in the response",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconService#GetTradeHistory"
                },
                "tags": [
                    "IEconService"
                ]
            }
        },
        "/IEconService/GetTradeHoldDurations/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid_target",
                        "in": "query",
                        "description": "(Required) User you are trading with",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "trade_offer_access_token",
                        "in": "query",
                        "description": "(Required) A special token that allows for trade offers from non-friends.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconService#GetTradeHoldDurations"
                },
                "tags": [
                    "IEconService"
                ]
            }
        },
        "/IEconService/GetTradeOffer/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "tradeofferid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "get_descriptions",
                        "in": "query",
                        "description": "(Required) If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconService#GetTradeOffer"
                },
                "tags": [
                    "IEconService"
                ]
            }
        },
        "/IEconService/GetTradeOffers/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "get_sent_offers",
                        "in": "query",
                        "description": "(Required) Request the list of sent offers.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "get_received_offers",
                        "in": "query",
                        "description": "(Required) Request the list of received offers.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "get_descriptions",
                        "in": "query",
                        "description": "(Required) If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "(Required) The language to use when loading item display data.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "(Required) Indicates we should only return offers which are still active, or offers that have changed in state since the time_historical_cutoff",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "historical_only",
                        "in": "query",
                        "description": "(Required) Indicates we should only return offers which are not active.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "time_historical_cutoff",
                        "in": "query",
                        "description": "(Required) When active_only is set, offers updated since this time will also be returned. When historical_only is set, only offers updated since this time are included.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor aka start index",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconService#GetTradeOffers"
                },
                "tags": [
                    "IEconService"
                ]
            }
        },
        "/IEconService/GetTradeOffersSummary/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "time_last_visit",
                        "in": "query",
                        "description": "(Required) The time the user last visited.  If not passed, will use the time the user last visited the trade offer page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconService#GetTradeOffersSummary"
                },
                "tags": [
                    "IEconService"
                ]
            }
        },
        "/IEconService/GetTradeStatus/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "tradeid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "get_descriptions",
                        "in": "query",
                        "description": "(Required) If set, the item display data for the items included in the returned trades will also be returned",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "(Required) The language to use when loading item display data",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IEconService#GetTradeStatus"
                },
                "tags": [
                    "IEconService"
                ]
            }
        },
        "/IGCVersion_1046930/GetClientVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_1046930#GetClientVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_1046930/GetServerVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_1046930#GetServerVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_1269260/GetClientVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_1269260#GetClientVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_1269260/GetServerVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_1269260#GetServerVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_1422450/GetClientVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_1422450#GetClientVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_1422450/GetServerVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_1422450#GetServerVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_440/GetClientVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_440#GetClientVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_440/GetServerVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_440#GetServerVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_570/GetClientVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_570#GetClientVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_570/GetServerVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_570#GetServerVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_583950/GetClientVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_583950#GetClientVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_583950/GetServerVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_583950#GetServerVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGCVersion_730/GetServerVersion/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGCVersion_730#GetServerVersion"
                },
                "tags": [
                    "IGCVersion"
                ]
            }
        },
        "/IGameNotificationsService/UserCreateSession/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameNotificationsService#UserCreateSession"
                },
                "tags": [
                    "IGameNotificationsService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) The appid to create the session for."
                                    },
                                    "context": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) Game-specified context value the game can used to associate the session with some object on their backend."
                                    },
                                    "title": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Required) The title of the session to be displayed within each user's list of sessions."
                                    },
                                    "users": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Required) The initial state of all users in the session."
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IGameNotificationsService/UserDeleteSession/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameNotificationsService#UserDeleteSession"
                },
                "tags": [
                    "IGameNotificationsService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sessionid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) The sessionid to delete."
                                    },
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) The appid of the session to delete."
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IGameNotificationsService/UserUpdateSession/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameNotificationsService#UserUpdateSession"
                },
                "tags": [
                    "IGameNotificationsService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sessionid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) The sessionid to update."
                                    },
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) The appid of the session to update."
                                    },
                                    "title": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Optional) The new title of the session.  If not specified, the title will not be changed."
                                    },
                                    "users": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IGameServersService/CreateAccount/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#CreateAccount"
                },
                "tags": [
                    "IGameServersService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required) The app to use the account for"
                                    },
                                    "memo": {
                                        "type": "string",
                                        "description": "(Required) The memo to set on the new account"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IGameServersService/DeleteAccount/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#DeleteAccount"
                },
                "tags": [
                    "IGameServersService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) The SteamID of the game server account to delete"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IGameServersService/GetAccountList/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#GetAccountList"
                },
                "tags": [
                    "IGameServersService"
                ]
            }
        },
        "/IGameServersService/GetAccountPublicInfo/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) The SteamID of the game server to get info on",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#GetAccountPublicInfo"
                },
                "tags": [
                    "IGameServersService"
                ]
            }
        },
        "/IGameServersService/GetServerIPsBySteamID/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "server_steamids",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#GetServerIPsBySteamID"
                },
                "tags": [
                    "IGameServersService"
                ]
            }
        },
        "/IGameServersService/GetServerSteamIDsByIP/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "server_ips",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#GetServerSteamIDsByIP"
                },
                "tags": [
                    "IGameServersService"
                ]
            }
        },
        "/IGameServersService/QueryByFakeIP/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "fake_ip",
                        "in": "query",
                        "description": "(Required) FakeIP of server to query.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fake_port",
                        "in": "query",
                        "description": "(Required) Fake port of server to query.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "app_id",
                        "in": "query",
                        "description": "(Required) AppID to use.  Each AppID has its own FakeIP address.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "query_type",
                        "in": "query",
                        "description": "(Required) What type of query?",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#QueryByFakeIP"
                },
                "tags": [
                    "IGameServersService"
                ]
            }
        },
        "/IGameServersService/QueryLoginToken/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "login_token",
                        "in": "query",
                        "description": "(Required) Login token to query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#QueryLoginToken"
                },
                "tags": [
                    "IGameServersService"
                ]
            }
        },
        "/IGameServersService/ResetLoginToken/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#ResetLoginToken"
                },
                "tags": [
                    "IGameServersService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) The SteamID of the game server to reset the login token of"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IGameServersService/SetMemo/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IGameServersService#SetMemo"
                },
                "tags": [
                    "IGameServersService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required) The SteamID of the game server to set the memo on"
                                    },
                                    "memo": {
                                        "type": "string",
                                        "description": "(Required) The memo to set on the new account"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IHelpRequestLogsService/GetApplicationLogDemand/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IHelpRequestLogsService#GetApplicationLogDemand"
                },
                "tags": [
                    "IHelpRequestLogsService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required)"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IHelpRequestLogsService/UploadUserApplicationLog/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IHelpRequestLogsService#UploadUserApplicationLog"
                },
                "tags": [
                    "IHelpRequestLogsService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required)"
                                    },
                                    "log_type": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "version_string": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "log_contents": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "request_id": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IInventoryService/CombineItemStacks/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IInventoryService#CombineItemStacks"
                },
                "tags": [
                    "IInventoryService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required)"
                                    },
                                    "fromitemid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    },
                                    "destitemid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required)"
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IInventoryService/GetPriceSheet/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "ecurrency",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "currency_code",
                        "in": "query",
                        "description": "(Required) Standard short code of the requested currency (preferred)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IInventoryService#GetPriceSheet"
                },
                "tags": [
                    "IInventoryService"
                ]
            }
        },
        "/IInventoryService/SplitItemStack/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IInventoryService#SplitItemStack"
                },
                "tags": [
                    "IInventoryService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required)"
                                    },
                                    "itemid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "(Required)"
                                    },
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IPlayerService/GetBadges/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) The player we're asking about",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPlayerService#GetBadges"
                },
                "tags": [
                    "IPlayerService"
                ]
            }
        },
        "/IPlayerService/GetCommunityBadgeProgress/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) The player we're asking about",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "badgeid",
                        "in": "query",
                        "description": "(Required) The badge we're asking about",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPlayerService#GetCommunityBadgeProgress"
                },
                "tags": [
                    "IPlayerService"
                ]
            }
        },
        "/IPlayerService/GetOwnedGames/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) The player we're asking about",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "include_appinfo",
                        "in": "query",
                        "description": "(Required) true if we want additional details (name, icon) about each game",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "include_played_free_games",
                        "in": "query",
                        "description": "(Required) Free games are excluded by default.  If this is set, free games the user has played will be returned.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "appids_filter",
                        "in": "query",
                        "description": "(Required) if set, restricts result set to the passed in apps",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "include_free_sub",
                        "in": "query",
                        "description": "(Required) Some games are in the free sub, which are excluded by default.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "skip_unvetted_apps",
                        "in": "query",
                        "description": "if set, skip unvetted store apps",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "(Required) Will return appinfo in this language",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include_extended_appinfo",
                        "in": "query",
                        "description": "(Required) true if we want even more details (capsule, sortas, and capabilities) about each game.  include_appinfo must also be true.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPlayerService#GetOwnedGames"
                },
                "tags": [
                    "IPlayerService"
                ]
            }
        },
        "/IPlayerService/GetRecentlyPlayedGames/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) The player we're asking about",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "(Required) The number of games to return (0/unset: all)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPlayerService#GetRecentlyPlayedGames"
                },
                "tags": [
                    "IPlayerService"
                ]
            }
        },
        "/IPlayerService/GetSteamLevel/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) The player we're asking about",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPlayerService#GetSteamLevel"
                },
                "tags": [
                    "IPlayerService"
                ]
            }
        },
        "/IPlayerService/IsPlayingSharedGame/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) The player we're asking about",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appid_playing",
                        "in": "query",
                        "description": "(Required) The game player is currently playing",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPlayerService#IsPlayingSharedGame"
                },
                "tags": [
                    "IPlayerService"
                ]
            }
        },
        "/IPlayerService/RecordOfflinePlaytime/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the request body; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPlayerService#RecordOfflinePlaytime"
                },
                "tags": [
                    "IPlayerService"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "(Required)"
                                    },
                                    "ticket": {
                                        "type": "string",
                                        "description": "(Required)"
                                    },
                                    "play_sessions": {
                                        "type": "string",
                                        "format": "{message}",
                                        "description": "(Required)"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/IPortal2Leaderboards_620/GetBucketizedData/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "leaderboardName",
                        "in": "query",
                        "description": "The leaderboard name to fetch data for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPortal2Leaderboards_620#GetBucketizedData"
                },
                "tags": [
                    "IPortal2Leaderboards"
                ]
            }
        },
        "/IPublishedFileService/GetDetails/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "publishedfileids",
                        "in": "query",
                        "description": "(Required) Set of published file Ids to retrieve details for.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "includetags",
                        "in": "query",
                        "description": "(Required) If true, return tag information in the returned details.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeadditionalpreviews",
                        "in": "query",
                        "description": "(Required) If true, return preview information in the returned details.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includechildren",
                        "in": "query",
                        "description": "(Required) If true, return children in the returned details.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includekvtags",
                        "in": "query",
                        "description": "(Required) If true, return key value tags in the returned details.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includevotes",
                        "in": "query",
                        "description": "(Required) If true, return vote data in the returned details.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "short_description",
                        "in": "query",
                        "description": "(Required) If true, return a short description instead of the full description.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeforsaledata",
                        "in": "query",
                        "description": "(Required) If true, return pricing data, if applicable.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includemetadata",
                        "in": "query",
                        "description": "(Required) If true, populate the metadata field.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Specifies the localized text to return. Defaults to English.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "return_playtime_stats",
                        "in": "query",
                        "description": "(Required) Return playtime stats for the specified number of days before today.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "strip_description_bbcode",
                        "in": "query",
                        "description": "(Required) Strips BBCode from descriptions.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "desired_revision",
                        "in": "query",
                        "description": "Return the data for the specified revision.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "includereactions",
                        "in": "query",
                        "description": "If true, then reactions to items will be returned.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "admin_query",
                        "in": "query",
                        "description": "(Required) Admin tool is doing a query, return hidden items",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPublishedFileService#GetDetails"
                },
                "tags": [
                    "IPublishedFileService"
                ]
            }
        },
        "/IPublishedFileService/GetSubSectionData/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "publishedfileid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "for_table_of_contents",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "specific_sectionid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "desired_revision",
                        "in": "query",
                        "description": "Return the data for the specified revision.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPublishedFileService#GetSubSectionData"
                },
                "tags": [
                    "IPublishedFileService"
                ]
            }
        },
        "/IPublishedFileService/GetUserFileCount/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) Steam ID of the user whose files are being requested.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "(Required) App Id of the app that the files were published to.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "shortcutid",
                        "in": "query",
                        "description": "(Optional) Shortcut Id to retrieve published files from.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "(Optional) Starting page for results.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "numperpage",
                        "in": "query",
                        "description": "(Optional) The number of results, per page to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "(Optional) Type of files to be returned.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortmethod",
                        "in": "query",
                        "description": "(Optional) Sorting method to use on returned values.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "privacy",
                        "in": "query",
                        "description": "(Required) (optional) Filter by privacy settings.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "requiredtags",
                        "in": "query",
                        "description": "(Optional) Tags that must be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "excludedtags",
                        "in": "query",
                        "description": "(Optional) Tags that must NOT be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "required_kv_tags",
                        "in": "query",
                        "description": "(Required) Required key-value tags to match on.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "filetype",
                        "in": "query",
                        "description": "(Optional) File type to match files to.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "creator_appid",
                        "in": "query",
                        "description": "(Required) App Id of the app that published the files, only matched if specified.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "match_cloud_filename",
                        "in": "query",
                        "description": "(Required) Match this cloud filename if specified.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cache_max_age_seconds",
                        "in": "query",
                        "description": "Allow stale data to be returned for the specified number of seconds.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Specifies the localized text to return. Defaults to English.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "taggroups",
                        "in": "query",
                        "description": "(Optional) At least one of the tags must be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "excluded_content_descriptors",
                        "in": "query",
                        "description": "(Optional) Filter out items that have these content descriptors.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "admin_query",
                        "in": "query",
                        "description": "(Required) Admin tool is doing a query, return hidden items",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "totalonly",
                        "in": "query",
                        "description": "(Optional) If true, only return the total number of files that satisfy this query.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ids_only",
                        "in": "query",
                        "description": "(Optional) If true, only return the published file ids of files that satisfy this query.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_vote_data",
                        "in": "query",
                        "description": "Return vote data",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_tags",
                        "in": "query",
                        "description": "(Required) Return tags in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_kv_tags",
                        "in": "query",
                        "description": "Return key-value tags in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_previews",
                        "in": "query",
                        "description": "(Required) Return preview image and video details in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_children",
                        "in": "query",
                        "description": "(Required) Return child item ids in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_short_description",
                        "in": "query",
                        "description": "Populate the short_description field instead of file_description",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_for_sale_data",
                        "in": "query",
                        "description": "(Required) Return pricing information, if applicable",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_metadata",
                        "in": "query",
                        "description": "Populate the metadata field",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_playtime_stats",
                        "in": "query",
                        "description": "(Required) Return playtime stats for the specified number of days before today.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "strip_description_bbcode",
                        "in": "query",
                        "description": "(Required) Strips BBCode from descriptions.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_reactions",
                        "in": "query",
                        "description": "If true, then reactions to items will be returned.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "startindex_override",
                        "in": "query",
                        "description": "(Required) Backwards compatible for the client.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "desired_revision",
                        "in": "query",
                        "description": "Return the data for the specified revision.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "return_apps",
                        "in": "query",
                        "description": "(Required) Return list of apps the items belong to",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPublishedFileService#GetUserFileCount"
                },
                "tags": [
                    "IPublishedFileService"
                ]
            }
        },
        "/IPublishedFileService/GetUserFiles/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required) Steam ID of the user whose files are being requested.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "(Required) App Id of the app that the files were published to.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "shortcutid",
                        "in": "query",
                        "description": "(Optional) Shortcut Id to retrieve published files from.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "(Optional) Starting page for results.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "numperpage",
                        "in": "query",
                        "description": "(Optional) The number of results, per page to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "(Optional) Type of files to be returned.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortmethod",
                        "in": "query",
                        "description": "(Optional) Sorting method to use on returned values.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "privacy",
                        "in": "query",
                        "description": "(Required) (optional) Filter by privacy settings.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "requiredtags",
                        "in": "query",
                        "description": "(Optional) Tags that must be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "excludedtags",
                        "in": "query",
                        "description": "(Optional) Tags that must NOT be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "required_kv_tags",
                        "in": "query",
                        "description": "(Required) Required key-value tags to match on.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "filetype",
                        "in": "query",
                        "description": "(Optional) File type to match files to.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "creator_appid",
                        "in": "query",
                        "description": "(Required) App Id of the app that published the files, only matched if specified.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "match_cloud_filename",
                        "in": "query",
                        "description": "(Required) Match this cloud filename if specified.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cache_max_age_seconds",
                        "in": "query",
                        "description": "Allow stale data to be returned for the specified number of seconds.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Specifies the localized text to return. Defaults to English.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "taggroups",
                        "in": "query",
                        "description": "(Optional) At least one of the tags must be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "excluded_content_descriptors",
                        "in": "query",
                        "description": "(Optional) Filter out items that have these content descriptors.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "admin_query",
                        "in": "query",
                        "description": "(Required) Admin tool is doing a query, return hidden items",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "totalonly",
                        "in": "query",
                        "description": "(Optional) If true, only return the total number of files that satisfy this query.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ids_only",
                        "in": "query",
                        "description": "(Optional) If true, only return the published file ids of files that satisfy this query.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_vote_data",
                        "in": "query",
                        "description": "Return vote data",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_tags",
                        "in": "query",
                        "description": "(Required) Return tags in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_kv_tags",
                        "in": "query",
                        "description": "Return key-value tags in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_previews",
                        "in": "query",
                        "description": "(Required) Return preview image and video details in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_children",
                        "in": "query",
                        "description": "(Required) Return child item ids in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_short_description",
                        "in": "query",
                        "description": "Populate the short_description field instead of file_description",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_for_sale_data",
                        "in": "query",
                        "description": "(Required) Return pricing information, if applicable",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_metadata",
                        "in": "query",
                        "description": "Populate the metadata field",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_playtime_stats",
                        "in": "query",
                        "description": "(Required) Return playtime stats for the specified number of days before today.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "strip_description_bbcode",
                        "in": "query",
                        "description": "(Required) Strips BBCode from descriptions.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_reactions",
                        "in": "query",
                        "description": "If true, then reactions to items will be returned.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "startindex_override",
                        "in": "query",
                        "description": "(Required) Backwards compatible for the client.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "desired_revision",
                        "in": "query",
                        "description": "Return the data for the specified revision.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "return_apps",
                        "in": "query",
                        "description": "(Required) Return list of apps the items belong to",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPublishedFileService#GetUserFiles"
                },
                "tags": [
                    "IPublishedFileService"
                ]
            }
        },
        "/IPublishedFileService/GetUserVoteSummary/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "publishedfileids",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPublishedFileService#GetUserVoteSummary"
                },
                "tags": [
                    "IPublishedFileService"
                ]
            }
        },
        "/IPublishedFileService/QueryFiles/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "query_type",
                        "in": "query",
                        "description": "(Required) enumeration EPublishedFileQueryType in clientenums.h",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "(Required) Current page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "(Required) Cursor to paginate through the results (set to '*' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "numperpage",
                        "in": "query",
                        "description": "(Optional) The number of results, per page to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "creator_appid",
                        "in": "query",
                        "description": "(Required) App that created the files",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "(Required) App that consumes the files",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "requiredtags",
                        "in": "query",
                        "description": "(Required) Tags to match on. See match_all_tags parameter below",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "excludedtags",
                        "in": "query",
                        "description": "(Optional) Tags that must NOT be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "match_all_tags",
                        "in": "query",
                        "description": "If true, then items must have all the tags specified, otherwise they must have at least one of the tags.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "required_flags",
                        "in": "query",
                        "description": "(Required) Required flags that must be set on any returned items",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "omitted_flags",
                        "in": "query",
                        "description": "(Required) Flags that must not be set on any returned items",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search_text",
                        "in": "query",
                        "description": "(Required) Text to match in the item's title or description",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filetype",
                        "in": "query",
                        "description": "(Required) EPublishedFileInfoMatchingFileType",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "child_publishedfileid",
                        "in": "query",
                        "description": "(Required) Find all items that reference the given item.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "days",
                        "in": "query",
                        "description": "(Required) If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7].",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "include_recent_votes_only",
                        "in": "query",
                        "description": "(Required) If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "cache_max_age_seconds",
                        "in": "query",
                        "description": "Allow stale data to be returned for the specified number of seconds.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language to search in and also what gets returned. Defaults to English.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "required_kv_tags",
                        "in": "query",
                        "description": "(Required) Required key-value tags to match on.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "taggroups",
                        "in": "query",
                        "description": "(Optional) At least one of the tags must be present on a published file to satisfy the query.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "date_range_created",
                        "in": "query",
                        "description": "(Optional) Filter to items created within this range.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "date_range_updated",
                        "in": "query",
                        "description": "(Optional) Filter to items updated within this range.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "excluded_content_descriptors",
                        "in": "query",
                        "description": "(Optional) Filter out items that have these content descriptors.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "admin_query",
                        "in": "query",
                        "description": "(Required) Admin tool is doing a query, return hidden items",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "totalonly",
                        "in": "query",
                        "description": "(Optional) If true, only return the total number of files that satisfy this query.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ids_only",
                        "in": "query",
                        "description": "(Optional) If true, only return the published file ids of files that satisfy this query.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_vote_data",
                        "in": "query",
                        "description": "(Required) Return vote data",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_tags",
                        "in": "query",
                        "description": "(Required) Return tags in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_kv_tags",
                        "in": "query",
                        "description": "(Required) Return key-value tags in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_previews",
                        "in": "query",
                        "description": "(Required) Return preview image and video details in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_children",
                        "in": "query",
                        "description": "(Required) Return child item ids in the file details",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_short_description",
                        "in": "query",
                        "description": "(Required) Populate the short_description field instead of file_description",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_for_sale_data",
                        "in": "query",
                        "description": "(Required) Return pricing information, if applicable",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_metadata",
                        "in": "query",
                        "description": "Populate the metadata",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "return_playtime_stats",
                        "in": "query",
                        "description": "(Required) Return playtime stats for the specified number of days before today.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "return_details",
                        "in": "query",
                        "description": "(Required) By default, if none of the other 'return_*' fields are set, only some voting details are returned. Set this to true to return the default set of details.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "strip_description_bbcode",
                        "in": "query",
                        "description": "(Required) Strips BBCode from descriptions.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "desired_revision",
                        "in": "query",
                        "description": "Return the data for the specified revision.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "return_reactions",
                        "in": "query",
                        "description": "If true, then reactions to items will be returned.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IPublishedFileService#QueryFiles"
                },
                "tags": [
                    "IPublishedFileService"
                ]
            }
        },
        "/ISteamApps/GetAppList/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamApps#GetAppList"
                },
                "tags": [
                    "ISteamApps"
                ]
            }
        },
        "/ISteamApps/GetAppList/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamApps#GetAppList"
                },
                "tags": [
                    "ISteamApps"
                ]
            }
        },
        "/ISteamApps/GetSDRConfig/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "AppID of game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamApps#GetSDRConfig"
                },
                "tags": [
                    "ISteamApps"
                ]
            }
        },
        "/ISteamApps/GetServersAtAddress/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "addr",
                        "in": "query",
                        "description": "IP or IP:queryport to list",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamApps#GetServersAtAddress"
                },
                "tags": [
                    "ISteamApps"
                ]
            }
        },
        "/ISteamApps/UpToDateCheck/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "AppID of game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The installed version of the game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamApps#UpToDateCheck"
                },
                "tags": [
                    "ISteamApps"
                ]
            }
        },
        "/ISteamBroadcast/ViewerHeartbeat/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "Steam ID of the broadcaster",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "sessionid",
                        "in": "query",
                        "description": "Broadcast Session ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Viewer token",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "stream",
                        "in": "query",
                        "description": "video stream representation watching",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamBroadcast#ViewerHeartbeat"
                },
                "tags": [
                    "ISteamBroadcast"
                ]
            }
        },
        "/ISteamCDN/SetClientFilters/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamCDN#SetClientFilters"
                },
                "tags": [
                    "ISteamCDN"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "cdnname": {
                                        "type": "string",
                                        "description": "Steam name of CDN property"
                                    },
                                    "allowedipblocks": {
                                        "type": "string",
                                        "description": "comma-separated list of allowed IP address blocks in CIDR format - blank for not used"
                                    },
                                    "allowedasns": {
                                        "type": "string",
                                        "description": "comma-separated list of allowed client network AS numbers - blank for not used"
                                    },
                                    "allowedipcountries": {
                                        "type": "string",
                                        "description": "comma-separated list of allowed client IP country codes in ISO 3166-1 format - blank for not used"
                                    }
                                },
                                "required": [
                                    "cdnname"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ISteamCDN/SetPerformanceStats/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamCDN#SetPerformanceStats"
                },
                "tags": [
                    "ISteamCDN"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "cdnname": {
                                        "type": "string",
                                        "description": "Steam name of CDN property"
                                    },
                                    "mbps_sent": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Outgoing network traffic in Mbps"
                                    },
                                    "mbps_recv": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Incoming network traffic in Mbps"
                                    },
                                    "cpu_percent": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Percent CPU load"
                                    },
                                    "cache_hit_percent": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Percent cache hits"
                                    }
                                },
                                "required": [
                                    "cdnname"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ISteamDirectory/GetCMList/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "cellid",
                        "in": "query",
                        "description": "Client's Steam cell ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "maxcount",
                        "in": "query",
                        "description": "Max number of servers to return",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamDirectory#GetCMList"
                },
                "tags": [
                    "ISteamDirectory"
                ]
            }
        },
        "/ISteamDirectory/GetCMListForConnect/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "cellid",
                        "in": "query",
                        "description": "Client's Steam cell ID, uses IP location if blank",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "cmtype",
                        "in": "query",
                        "description": "Optional CM type filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "realm",
                        "in": "query",
                        "description": "Optional Steam Realm filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "maxcount",
                        "in": "query",
                        "description": "Max number of servers to return",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "qoslevel",
                        "in": "query",
                        "description": "Desired connection priority",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamDirectory#GetCMListForConnect"
                },
                "tags": [
                    "ISteamDirectory"
                ]
            }
        },
        "/ISteamDirectory/GetSteamPipeDomains/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamDirectory#GetSteamPipeDomains"
                },
                "tags": [
                    "ISteamDirectory"
                ]
            }
        },
        "/ISteamEconomy/GetAssetClassInfo/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "Must be a steam economy app.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The user's local language",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "class_count",
                        "in": "query",
                        "description": "Number of classes requested. Must be at least one.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "classid0",
                        "in": "query",
                        "description": "Class ID of the nth class.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "instanceid0",
                        "in": "query",
                        "description": "Instance ID of the nth class.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamEconomy#GetAssetClassInfo"
                },
                "tags": [
                    "ISteamEconomy"
                ]
            }
        },
        "/ISteamEconomy/GetAssetPrices/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "Must be a steam economy app.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "currency",
                        "in": "query",
                        "description": "The currency to filter for",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The user's local language",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamEconomy#GetAssetPrices"
                },
                "tags": [
                    "ISteamEconomy"
                ]
            }
        },
        "/ISteamNews/GetNewsForApp/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "AppID to retrieve news for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "maxlength",
                        "in": "query",
                        "description": "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "enddate",
                        "in": "query",
                        "description": "Retrieve posts earlier than this date (unix epoch timestamp)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "# of posts to retrieve (default 20)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamNews#GetNewsForApp"
                },
                "tags": [
                    "ISteamNews"
                ]
            }
        },
        "/ISteamNews/GetNewsForApp/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "AppID to retrieve news for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "maxlength",
                        "in": "query",
                        "description": "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "enddate",
                        "in": "query",
                        "description": "Retrieve posts earlier than this date (unix epoch timestamp)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "# of posts to retrieve (default 20)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "feeds",
                        "in": "query",
                        "description": "Comma-separated list of feed names to return news for",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamNews#GetNewsForApp"
                },
                "tags": [
                    "ISteamNews"
                ]
            }
        },
        "/ISteamRemoteStorage/GetCollectionDetails/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamRemoteStorage#GetCollectionDetails"
                },
                "tags": [
                    "ISteamRemoteStorage"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "collectioncount": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Number of collections being requested"
                                    },
                                    "publishedfileids[0]": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "collection ids to get the details for<br>Note: this is an <a href=https://partner.steamgames.com/doc/webapi_overview#2>array parameter</a>"
                                    }
                                },
                                "required": [
                                    "collectioncount",
                                    "publishedfileids[0]"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ISteamRemoteStorage/GetPublishedFileDetails/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamRemoteStorage#GetPublishedFileDetails"
                },
                "tags": [
                    "ISteamRemoteStorage"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "itemcount": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Number of items being requested"
                                    },
                                    "publishedfileids[0]": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "published file id to look up<br>Note: this is an <a href=https://partner.steamgames.com/doc/webapi_overview#2>array parameter</a>"
                                    }
                                },
                                "required": [
                                    "itemcount",
                                    "publishedfileids[0]"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ISteamRemoteStorage/GetUGCFileDetails/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "If specified, only returns details if the file is owned by the SteamID specified",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ugcid",
                        "in": "query",
                        "description": "ID of UGC file to get info for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "appID of product",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamRemoteStorage#GetUGCFileDetails"
                },
                "tags": [
                    "ISteamRemoteStorage"
                ]
            }
        },
        "/ISteamUser/GetFriendList/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "SteamID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "relationship",
                        "in": "query",
                        "description": "relationship type (ex: friend)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUser#GetFriendList"
                },
                "tags": [
                    "ISteamUser"
                ]
            }
        },
        "/ISteamUser/GetPlayerBans/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamids",
                        "in": "query",
                        "description": "Comma-delimited list of SteamIDs",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerBans"
                },
                "tags": [
                    "ISteamUser"
                ]
            }
        },
        "/ISteamUser/GetPlayerSummaries/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamids",
                        "in": "query",
                        "description": "Comma-delimited list of SteamIDs",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerSummaries"
                },
                "tags": [
                    "ISteamUser"
                ]
            }
        },
        "/ISteamUser/GetPlayerSummaries/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamids",
                        "in": "query",
                        "description": "Comma-delimited list of SteamIDs (max: 100)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerSummaries"
                },
                "tags": [
                    "ISteamUser"
                ]
            }
        },
        "/ISteamUser/GetUserGroupList/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "SteamID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUser#GetUserGroupList"
                },
                "tags": [
                    "ISteamUser"
                ]
            }
        },
        "/ISteamUser/ResolveVanityURL/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "vanityurl",
                        "in": "query",
                        "description": "The vanity URL to get a SteamID for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "url_type",
                        "in": "query",
                        "description": "The type of vanity URL. 1 (default): Individual profile, 2: Group, 3: Official game group",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUser#ResolveVanityURL"
                },
                "tags": [
                    "ISteamUser"
                ]
            }
        },
        "/ISteamUserAuth/AuthenticateUserTicket/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "appid of game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ticket",
                        "in": "query",
                        "description": "Ticket from GetAuthSessionTicket.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserAuth#AuthenticateUserTicket"
                },
                "tags": [
                    "ISteamUserAuth"
                ]
            }
        },
        "/ISteamUserOAuth/GetTokenDetails/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "access_token",
                        "in": "query",
                        "description": "OAuth2 token for which to return details",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserOAuth#GetTokenDetails"
                },
                "tags": [
                    "ISteamUserOAuth"
                ]
            }
        },
        "/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "gameid",
                        "in": "query",
                        "description": "GameID to retrieve the achievement percentages for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetGlobalAchievementPercentagesForApp"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "gameid",
                        "in": "query",
                        "description": "GameID to retrieve the achievement percentages for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetGlobalAchievementPercentagesForApp"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetGlobalStatsForGame/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "AppID that we're getting global stats for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of stats get data for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name[0]",
                        "in": "query",
                        "description": "Names of stat to get data for<br>Note: this is an <a href=https://partner.steamgames.com/doc/webapi_overview#2>array parameter</a>",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startdate",
                        "in": "query",
                        "description": "Start date for daily totals (unix epoch timestamp)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "enddate",
                        "in": "query",
                        "description": "End date for daily totals (unix epoch timestamp)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetGlobalStatsForGame"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetNumberOfCurrentPlayers/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "AppID that we're getting user count for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetNumberOfCurrentPlayers"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetPlayerAchievements/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "SteamID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "AppID to get achievements for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "l",
                        "in": "query",
                        "description": "Language to return strings for",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetPlayerAchievements"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetSchemaForGame/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "appid of game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "l",
                        "in": "query",
                        "description": "localized langauge to return (english, french, etc.)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetSchemaForGame"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetSchemaForGame/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "appid of game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "l",
                        "in": "query",
                        "description": "localized language to return (english, french, etc.)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetSchemaForGame"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetUserStatsForGame/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "SteamID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "appid of game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetUserStatsForGame"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamUserStats/GetUserStatsForGame/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "SteamID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "appid of game",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamUserStats#GetUserStatsForGame"
                },
                "tags": [
                    "ISteamUserStats"
                ]
            }
        },
        "/ISteamWebAPIUtil/GetServerInfo/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamWebAPIUtil#GetServerInfo"
                },
                "tags": [
                    "ISteamWebAPIUtil"
                ]
            }
        },
        "/ISteamWebAPIUtil/GetSupportedAPIList/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ISteamWebAPIUtil#GetSupportedAPIList"
                },
                "tags": [
                    "ISteamWebAPIUtil"
                ]
            }
        },
        "/IStoreService/GetAppList/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "if_modified_since",
                        "in": "query",
                        "description": "Return only items that have been modified since this date.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "have_description_language",
                        "in": "query",
                        "description": "Return only items that have a description in this language.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include_games",
                        "in": "query",
                        "description": "Include games (defaults to enabled)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "include_dlc",
                        "in": "query",
                        "description": "Include DLC",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "include_software",
                        "in": "query",
                        "description": "Include software items",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "include_videos",
                        "in": "query",
                        "description": "Include videos and series",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "include_hardware",
                        "in": "query",
                        "description": "Include hardware",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "last_appid",
                        "in": "query",
                        "description": "For continuations, this is the last appid returned from the previous call.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_results",
                        "in": "query",
                        "description": "Number of results to return at a time.  Default 10k, max 50k.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IStoreService#GetAppList"
                },
                "tags": [
                    "IStoreService"
                ]
            }
        },
        "/ITFItems_440/GetGoldenWrenches/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ITFItems_440#GetGoldenWrenches"
                },
                "tags": [
                    "ITFItems"
                ]
            }
        },
        "/ITFItems_440/GetGoldenWrenches/v2": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ITFItems_440#GetGoldenWrenches"
                },
                "tags": [
                    "ITFItems"
                ]
            }
        },
        "/ITFPromos_440/GetItemID/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "promoid",
                        "in": "query",
                        "description": "The promo ID to grant an item for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ITFPromos_440#GetItemID"
                },
                "tags": [
                    "ITFPromos"
                ]
            }
        },
        "/ITFPromos_440/GrantItem/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ITFPromos_440#GrantItem"
                },
                "tags": [
                    "ITFPromos"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "The Steam ID to fetch items for"
                                    },
                                    "promoid": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The promo ID to grant an item for"
                                    }
                                },
                                "required": [
                                    "steamid",
                                    "promoid"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ITFPromos_620/GetItemID/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "The Steam ID to fetch items for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "PromoID",
                        "in": "query",
                        "description": "The promo ID to grant an item for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ITFPromos_620#GetItemID"
                },
                "tags": [
                    "ITFPromos"
                ]
            }
        },
        "/ITFPromos_620/GrantItem/v1": {
            "post": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ITFPromos_620#GrantItem"
                },
                "tags": [
                    "ITFPromos"
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "steamid": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "The Steam ID to fetch items for"
                                    },
                                    "PromoID": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The promo ID to grant an item for"
                                    }
                                },
                                "required": [
                                    "steamid",
                                    "PromoID"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/ITFSystem_440/GetWorldStatus/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/ITFSystem_440#GetWorldStatus"
                },
                "tags": [
                    "ITFSystem"
                ]
            }
        },
        "/IWishlistService/GetWishlist/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IWishlistService#GetWishlist"
                },
                "tags": [
                    "IWishlistService"
                ]
            }
        },
        "/IWishlistService/GetWishlistItemCount/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IWishlistService#GetWishlistItemCount"
                },
                "tags": [
                    "IWishlistService"
                ]
            }
        },
        "/IWishlistService/GetWishlistSortedFiltered/v1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A successful request"
                    },
                    "400": {
                        "description": "If the user fails to supply all required fields, or supplies invalid data"
                    },
                    "403": {
                        "description": "If the user fails to supply a valid API key, or if the key does not allow access to this resource"
                    }
                },
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "data_request",
                        "in": "query",
                        "description": "(Required) If passed, item data will be returned",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "sort_order",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{enum}"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "(Required)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "{message}"
                        }
                    },
                    {
                        "name": "start_index",
                        "in": "query",
                        "description": "Data in this range will be filled in with StoreBrowse data",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "input_json",
                        "in": "query",
                        "description": "An alternative to the query string parameters; pass arguments as a URL-encoded JSON blob. The \"key\" and \"format\" fields should still be passed as separate parameters",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "The format of the response. Defaults to json",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "xml",
                                "vdf"
                            ]
                        }
                    }
                ],
                "externalDocs": {
                    "url": "https://partner.steamgames.com/doc/webapi/IWishlistService#GetWishlistSortedFiltered"
                },
                "tags": [
                    "IWishlistService"
                ]
            }
        }
    },
    "externalDocs": {
        "url": "https://partner.steamgames.com/doc/webapi",
        "description": "Steamworks Web API Reference"
    },
    "security": [
        {
            "key": []
        }
    ],
    "components": {
        "securitySchemes": {
            "key": {
                "type": "apiKey",
                "name": "key",
                "in": "query"
            }
        }
    },
    "tags": [
        {
            "name": "IAuthenticationService"
        },
        {
            "name": "IBroadcastService"
        },
        {
            "name": "ICSGOPlayers"
        },
        {
            "name": "ICSGOServers"
        },
        {
            "name": "ICSGOTournaments"
        },
        {
            "name": "ICheatReportingService"
        },
        {
            "name": "IClientStats"
        },
        {
            "name": "IContentServerConfigService"
        },
        {
            "name": "IContentServerDirectoryService"
        },
        {
            "name": "IDOTA2Match"
        },
        {
            "name": "IDOTA2MatchStats"
        },
        {
            "name": "IDOTA2StreamSystem"
        },
        {
            "name": "IDOTA2Ticket"
        },
        {
            "name": "IEconDOTA2"
        },
        {
            "name": "IEconItems"
        },
        {
            "name": "IEconService"
        },
        {
            "name": "IGCVersion"
        },
        {
            "name": "IGameNotificationsService"
        },
        {
            "name": "IGameServersService"
        },
        {
            "name": "IHelpRequestLogsService"
        },
        {
            "name": "IInventoryService"
        },
        {
            "name": "IPlayerService"
        },
        {
            "name": "IPortal2Leaderboards"
        },
        {
            "name": "IPublishedFileService"
        },
        {
            "name": "ISteamApps"
        },
        {
            "name": "ISteamBroadcast"
        },
        {
            "name": "ISteamCDN"
        },
        {
            "name": "ISteamDirectory"
        },
        {
            "name": "ISteamEconomy"
        },
        {
            "name": "ISteamNews"
        },
        {
            "name": "ISteamRemoteStorage"
        },
        {
            "name": "ISteamUser"
        },
        {
            "name": "ISteamUserAuth"
        },
        {
            "name": "ISteamUserOAuth"
        },
        {
            "name": "ISteamUserStats"
        },
        {
            "name": "ISteamWebAPIUtil"
        },
        {
            "name": "IStoreService"
        },
        {
            "name": "ITFItems"
        },
        {
            "name": "ITFPromos"
        },
        {
            "name": "ITFSystem"
        },
        {
            "name": "IWishlistService"
        }
    ]
}